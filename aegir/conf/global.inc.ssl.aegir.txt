<?php # global settings.php

error_reporting(0); // disable reporting errors by default - enable later only for "dev" subdomains

if (isset($_SERVER['HTTP_HOST']) && empty($cookie_domain)) {
  $domain = '.'. preg_replace('`^www.`', '', $_SERVER['HTTP_HOST']);
  if (count(explode('.', $domain)) > 2) {
    @ini_set('session.cookie_domain', $domain);
    $cookie_domain = $domain;
  }
}

$conf['page_compression'] = 0;    // required for Nginx, since it already compresses everything
$conf['boost_crawl_on_cron'] = 0; // deny Boost crawler
$conf['cron_safe_threshold'] = 0; // disable poormanscron in d5 and d6
$conf['preprocess_css'] = 1;      // enable hardcoded css aggregation
$conf['preprocess_js'] = 1;       // enable hardcoded js aggregation
$conf['cache'] = 1;               // enable hardcoded caching
$conf['file_downloads'] = 1;      // force public downloads by default
$conf['error_level'] = 0;         // disable errors on screen
$conf['statistics_enable_access_log'] = 0; // disable access log stats

ini_set('session.cookie_lifetime', 86400); // set it to 24 hours max
ini_set('session.cache_expire', 86400);    // set it also to 24 hours max
ini_set('session.gc_maxlifetime', 86400);  // set it also to 24 hours max
// Improve sessions management if module session_expire and/or Pressflow core is not used.
// It is already enabled in the php.ini, but we are forcing it here, just in case.
ini_set('session.gc_probability', 1);
ini_set('session.gc_divisor', 1000);

if (preg_match("/hostmaster/", $conf['install_profile']) && isset($_SERVER['HTTP_USER_AGENT'])) {
  $request_type = ($_SERVER['HTTP_X_FORWARDED_PROTO'] == 'https') ? 'SSL' : 'NONSSL';
  if ($request_type != "SSL" && !preg_match("/cron\.php/", $_SERVER['REQUEST_URI'])) { // we force secure connection here
    header("HTTP/1.1 301 Moved Permanently");
    header("Location: https://" . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']);
  }
  $conf['hosting_require_disable_before_delete'] = 0;
  unset($conf['cache']); // disable hardcoded caching
  ini_set('session.cookie_lifetime', 0); // force log-out on browser quit
}

// http://drupal.org/node/912682#comment-3503636
if (preg_match("/managingnews/", $conf['install_profile'])) {
  ini_set('auto_detect_line_endings', TRUE);
}

if (preg_match("/uberdrupal/", $conf['install_profile']) ||
    file_exists('sites/all/modules/ubercart/README.txt') ||
    file_exists('profiles/' . $conf['install_profile'] . '/modules/ubercart/README.txt') ||
    file_exists('profiles/' . $conf['install_profile'] . '/modules/contrib/ubercart/README.txt')) {
  unset($conf['file_downloads']); // disable hardcoded public downloads for ubercart
}

if (isset($_SERVER['HTTP_HOST']) && preg_match("/dev/i", $_SERVER['HTTP_HOST']) && isset($_SERVER['HTTP_USER_AGENT'])) {
  // deny known search bots on dev subdomains
  if (preg_match("/(?:crawl|google|yahoo|spider|bot|tracker|click|parser)/i", $_SERVER['HTTP_USER_AGENT'])) {
    header("HTTP/1.1 301 Moved Permanently");
    header("Location: http://www.aegirproject.org/");
  }
  error_reporting(E_ALL & ~E_NOTICE);
  ini_set('display_errors', TRUE);
  ini_set('display_startup_errors', TRUE);
  unset($conf['cache']);          // disable hardcoded caching
  unset($conf['preprocess_css']); // disable hardcoded css aggregation
  unset($conf['preprocess_js']);  // disable hardcoded js aggregation
  unset($conf['error_level']);    // disable hardcoded no errors on screen
  $conf['xmlsitemap_submit'] = 0; // disable XML Sitemap for dev.domain
  $conf['xmlsitemap_update'] = 0; // disable XML Sitemap for dev.domain
}

if (isset($_SERVER['HTTP_HOST']) && preg_match("/host8/i", $_SERVER['HTTP_HOST']) && isset($_SERVER['HTTP_USER_AGENT'])) {
  // deny known search bots on host8 subdomains
  if (preg_match("/(?:crawl|google|yahoo|spider|bot|tracker|click|parser)/i", $_SERVER['HTTP_USER_AGENT'])) {
    header("HTTP/1.1 301 Moved Permanently");
    header("Location: http://omega8.cc/");
  }
}

if (isset($_SERVER['HTTP_HOST'])) {

  if (isset($_SERVER['HTTP_USER_AGENT'])) {
    if (preg_match("/(?:Nokia|BlackBerry.+MIDP|240x|320x|Palm|NetFront|Symbian|SonyEricsson)/i", $_SERVER['HTTP_USER_AGENT'])) {
      $this_device = 'mobile-other';
    }
    elseif (preg_match("/(?:iPhone|iPod|Android|BlackBerry.+AppleWebKit)/i", $_SERVER['HTTP_USER_AGENT'])) {
      $this_device = 'mobile-smart';
    }
    elseif (preg_match("/(?:iPad|Tablet)/i", $_SERVER['HTTP_USER_AGENT'])) {
      $this_device = 'mobile-tablet';
    }
    else {
      $this_device = 'normal';
    }  
  }
  else {
    $this_device = 'normal';
  }
  $conf['boost_normal_dir'] = $this_device;
  $conf['boost_gzip_dir'] = $this_device;
  $this_prefix = $_SERVER['HTTP_HOST'] . '.' . $this_device;

  if (file_exists('sites/all/modules/advagg/advagg_bundler/advagg_bundler.module') ||
      file_exists('sites/'. $_SERVER['HTTP_HOST'] .'/modules/advagg/advagg_bundler/advagg_bundler.module') ||
      file_exists('profiles/' . $conf['install_profile'] . '/modules/advagg/advagg_bundler/advagg_bundler.module') ||
      file_exists('profiles/' . $conf['install_profile'] . '/modules/contrib/advagg/advagg_bundler/advagg_bundler.module')) {
    $conf['preprocess_css'] = 0; // disable hardcoded css aggregation
    $conf['preprocess_js'] = 0;  // disable hardcoded js aggregation
    $conf['advagg_aggregate_mode'] = 2;
    $conf['advagg_async_generation'] = 1;
    $conf['advagg_checksum_mode'] = "md5";
    $conf['advagg_closure'] = 1;
    $conf['advagg_css_compress_agg_files'] = 1;
    $conf['advagg_css_compress_compressor_level'] = "sane";
    $conf['advagg_css_compress_inline'] = 1;
    $conf['advagg_css_compressor'] = 1;
    $conf['advagg_debug'] = 0;
    $conf['advagg_dir_htaccess'] = 0;
    $conf['advagg_enabled'] = 1;
    $conf['advagg_gzip_compression'] = 1;
    $conf['advagg_js_compress_agg_files'] = 1;
    $conf['advagg_js_compress_callback'] = 1;
    $conf['advagg_js_compress_inline'] = 1;
    $conf['advagg_js_compress_packer_enable'] = 0;
    $conf['advagg_js_compressor'] = 0;
    $conf['advagg_page_cache_mode'] = 1;
    $conf['advagg_rebuild_on_flush'] = 0;
    $conf['advagg_server_addr'] = "-1";
    $conf['advagg_socket_timeout'] = 1;
  }

  if (file_exists('./modules/o_contrib/purge/purge.inc')) {
    $conf['purge_proxy_urls'] = "http://127.0.0.1:8888/purge?purge_method=get";
  }

  if (isset($_SERVER['HTTP_X_FORWARDED_PROTO'])) {
    $conf['https'] = TRUE;
    $request_type = ($_SERVER['HTTP_X_FORWARDED_PROTO'] == 'https') ? 'SSL' : 'NONSSL';
    if ($request_type == "SSL") { // we check for secure connection to set correct base_url
      $base_url = 'https://' . $_SERVER['HTTP_HOST'];
      if (!preg_match("/hostmaster/", $conf['install_profile'])) {
        $_SERVER['HTTPS'] = 'on';
      }
    }
    else {
      $base_url = 'http://' . $_SERVER['HTTP_HOST'];
    }
  }
  else {
    $base_url = 'http://' . $_SERVER['HTTP_HOST'];
  }

  if (preg_match("/\/(?:files\/advagg_|files\/styles|files\/imagecache)/", $_SERVER['REQUEST_URI'])) {
    header('X-Accel-Expires: 0'); // do not cache it on the Nginx level
  }

  if (isset($_SERVER['REQUEST_TIME']) && isset($_SERVER['REMOTE_ADDR']) && isset($_SERVER['HTTP_USER_AGENT']) &&
      !preg_match("/\/(?:files\/advagg_|files\/styles|files\/imagecache)/", $_SERVER['REQUEST_URI'])) {
    $identity = $_SERVER['REQUEST_TIME'] . $_SERVER['REMOTE_ADDR'] . $_SERVER['HTTP_HOST'] . $_SERVER['HTTP_USER_AGENT'];
    $identity = 'BOND'. md5("$identity");

    if (preg_match("/(?:standard|minimal|testing|openpublic|commerce)/", $conf['install_profile'])) {
      $conf['https'] = TRUE;
      $sess_prefix = ini_get('session.cookie_secure') ? 'SSESS' : 'SESS';
      $test_sess_name = $sess_prefix . substr(hash('sha256', $cookie_domain), 0, 32);
      unset($conf['file_downloads']);      // disable hardcoded public downloads in d7
      unset($conf['cron_safe_threshold']); // allow poormanscron in d7
    }
    else {
      $test_sess_name = 'SESS'. md5($cookie_domain);
    }

    if (isset($_SERVER['HTTP_X_FORWARDED_PROTO']) || preg_match("/(?:hostmaster|uberdrupal|commerce)/", $conf['install_profile']) ||
        preg_match("/^\/(?:user|admin|cart|checkout|logout)/", $_SERVER['REQUEST_URI']) ||
        preg_match("/\/(?:node\/[0-9]+\/edit|node\/add|comment\/reply|approve|users)/", $_SERVER['REQUEST_URI']) ||
        file_exists('sites/all/modules/ubercart/README.txt') ||
        file_exists('profiles/' . $conf['install_profile'] . '/modules/ubercart/README.txt') ||
        file_exists('profiles/' . $conf['install_profile'] . '/modules/contrib/ubercart/README.txt') ||
        file_exists('sites/'. $_SERVER['HTTP_HOST'] .'/modules/ubercart/README.txt') ||
        preg_match("/dev/", $_SERVER['HTTP_HOST'])) {
      header('X-Accel-Expires: 0');
      if (isset($_COOKIE[$test_sess_name]) && !isset($_COOKIE[OctopusNoCacheID])) {
        $lifetime = '240';
        setcookie('OctopusNoCacheID', $identity, $_SERVER['REQUEST_TIME'] + ($lifetime + 60), '/', $cookie_domain);
      }
      elseif (!isset($_COOKIE[$test_sess_name]) && !isset($_COOKIE[OctopusNoCacheID])) {
        $lifetime = '240';
        setcookie('OctopusNoCacheID', 'NOCACHE' . $identity, $_SERVER['REQUEST_TIME'] + ($lifetime + 60), '/', $cookie_domain);
      }
    }
    elseif (isset($_COOKIE[$test_sess_name]) && !isset($_COOKIE[OctopusCacheID])) {
      $lifetime = '86400';
      setcookie('OctopusCacheID', $identity, $_SERVER['REQUEST_TIME'] + ($lifetime + 300), '/', $cookie_domain);
      header('X-Accel-Expires: 300');
    }
    elseif (isset($_COOKIE[$test_sess_name]) && isset($_COOKIE[OctopusCacheID])) {
      $loggedinactive = 'YES';
      header('X-Accel-Expires: 300');
    }
    elseif (!isset($_COOKIE[$test_sess_name]) && isset($_COOKIE[OctopusCacheID])) {
      $lifetime = '0';
      setcookie('OctopusCacheID', 'NOCACHE' . $identity, $_SERVER['REQUEST_TIME'] + ($lifetime + 60), '/', $cookie_domain);
      header('X-Accel-Expires: 0');
    }
  }
}

$use_cache = 'YES';   // Standard Redis/Memcached integration for 6.x core is enabled by default.
                      
$cache_module_path = './modules/o_contrib/cache/cache.inc'; // It is possible to define custom path.

$custom_cache = 'NO'; // When set to YES it will disable default Redis/Memcached configuration,
                      // so you can define your own, custom configuration in the included below
                      // /data/conf/override.global.inc file.

$custom_fb = 'NO';    // When set to YES it will disable default Drupal for Facebook (fb) configuration,
                      // so you can define your own, custom configuration in the included below
                      // /data/conf/override.global.inc file.

$custom_da = 'NO';    // When set to YES it will disable default Domain Access configuration,
                      // so you can define your own, custom configuration in the included below
                      // /data/conf/override.global.inc file. NOTE: if set to YES, then you
                      // must set to YES also $custom_cache above and copy all its logic in your
                      // /data/conf/override.global.inc file, because Domain Access must be included
                      // *after* any cache-related settings to work properly.

if (isset($_SERVER['HTTP_HOST']) && (file_exists('sites/all/modules/cache/NO.txt') ||
    file_exists('sites/'. $_SERVER['HTTP_HOST'] .'/modules/cache/NO.txt'))) {
  $use_cache = 'NO';
}

if (isset($_SERVER['REQUEST_URI']) && preg_match("/apachesolr/", $_SERVER['REQUEST_URI'])) {
  $use_cache = 'NO';
}

// Fix for Mollom and others running via Proxy.
if (isset($_SERVER['HTTP_X_FORWARDED_FOR']) && isset($_SERVER['REMOTE_ADDR'])) {
  $_SERVER[REMOTE_ADDR] = $_SERVER[HTTP_X_FORWARDED_FOR];
}
if (isset($_SERVER['HTTP_X_REAL_IP']) && isset($_SERVER['REMOTE_ADDR'])) {
  $_SERVER[REMOTE_ADDR] = $_SERVER[HTTP_X_REAL_IP];
}

/**
 * Optional extra settings/overrides
 *
 */
if (file_exists('/data/conf/override.global.inc')) {
  require_once "/data/conf/override.global.inc";
}

// don't use chained memcached and redis caching for hostmaster, d7 profiles, sites cron and php-cli
if (!preg_match("/(?:hostmaster|standard|minimal|testing|commerce|openpublic)/", $conf['install_profile']) &&
  isset($_SERVER['HTTP_USER_AGENT']) && $use_cache == "YES" && $custom_cache == "NO" ) {
  if (isset($_SERVER['HTTP_HOST']) && !preg_match("/dev/", $_SERVER['HTTP_HOST'])) {
     $conf['securepages_enable'] = 1;  // force securepages_enable to avoid issues with SSL proxy
     if (file_exists($cache_module_path)) {
      $conf['cache_inc'] = $cache_module_path;
      $conf['cache_settings'] = array(
      'engines' => array(
        'redis-engine' => array(
          'engine' => 'redis',
          'server' => array('127.0.0.1:6379'),
          'shared' => TRUE,
          'prefix' => $this_prefix,
        ),
        'memcache-engine-a' => array(
          'engine' => 'memcached',
          'server' => array('127.0.0.1:11211'),
          'shared' => TRUE,
          'prefix' => $this_prefix,
        ),
        'memcache-engine-b' => array(
          'engine' => 'memcached',
          'server' => array('127.0.0.1:11212'),
          'shared' => TRUE,
          'prefix' => $this_prefix,
        ),
        'memcache-engine-c' => array(
          'engine' => 'memcached',
          'server' => array('127.0.0.1:11213'),
          'shared' => TRUE,
          'prefix' => $this_prefix,
        ),
        'memcache-engine-d' => array(
          'engine' => 'memcached',
          'server' => array('127.0.0.1:11214'),
          'shared' => TRUE,
          'prefix' => $this_prefix,
        ),
        'memcache-engine-e' => array(
          'engine' => 'memcached',
          'server' => array('127.0.0.1:11215'),
          'shared' => TRUE,
          'prefix' => $this_prefix,
        ),
        'memcache-engine-f' => array(
          'engine' => 'memcached',
          'server' => array('127.0.0.1:11216'),
          'shared' => TRUE,
          'prefix' => $this_prefix,
        ),
        'memcache-engine-g' => array(
          'engine' => 'memcached',
          'server' => array('127.0.0.1:11217'),
          'shared' => TRUE,
          'prefix' => $this_prefix,
        ),
        'memcache-engine-h' => array(
          'engine' => 'memcached',
          'server' => array('127.0.0.1:11218'),
          'shared' => TRUE,
          'prefix' => $this_prefix,
        ),
        'db-engine' => array(
          'engine' => 'database',
          'server' => array(),
          'shared' => TRUE,
          'prefix' => $this_prefix,
        ),
      ),
      'schemas' => array(
        'memcache-a-redis-db-schema' => array(
          // Primary cache.
          'memcache-engine-a',
          // Secondary cache.
          'redis-engine',
          // Secondary cache.
          'db-engine',
        ),
        'memcache-b-redis-db-schema' => array(
          // Primary cache.
          'memcache-engine-b',
          // Secondary cache.
          'redis-engine',
          // Secondary cache.
          'db-engine',
        ),
        'memcache-c-redis-db-schema' => array(
          // Primary cache.
          'memcache-engine-c',
          // Secondary cache.
          'redis-engine',
          // Secondary cache.
          'db-engine',
        ),
        'memcache-d-redis-db-schema' => array(
          // Primary cache.
          'memcache-engine-d',
          // Secondary cache.
          'redis-engine',
          // Secondary cache.
          'db-engine',
        ),
        'memcache-e-redis-db-schema' => array(
          // Primary cache.
          'memcache-engine-e',
          // Secondary cache.
          'redis-engine',
          // Secondary cache.
          'db-engine',
        ),
        'memcache-f-redis-db-schema' => array(
          // Primary cache.
          'memcache-engine-f',
          // Secondary cache.
          'redis-engine',
          // Secondary cache.
          'db-engine',
        ),
        'memcache-g-redis-db-schema' => array(
          // Primary cache.
          'memcache-engine-g',
          // Secondary cache.
          'redis-engine',
          // Secondary cache.
          'db-engine',
        ),
        'memcache-h-redis-db-schema' => array(
          // Primary cache.
          'memcache-engine-h',
          // Secondary cache.
          'redis-engine',
          // Secondary cache.
          'db-engine',
        ),
        'redis-db-schema' => array(
          // Primary cache.
          'redis-engine',
          // Secondary cache.
          //'memcache-engine-f',
          // Secondary cache.
          'db-engine',
        ),
        'memcache-db-schema' => array(
          // Primary cache.
          'memcache-engine-h',
          // Secondary cache.
          'db-engine',
        ),
      ),
      'bins' => array(
        // Bin name           => Schema name.
        'default'             => 'memcache-f-redis-db-schema',
        'cache'               => 'memcache-a-redis-db-schema',
        'cache_form'          => 'memcache-b-redis-db-schema',
        'cache_filter'        => 'memcache-c-redis-db-schema',
        'cache_path'          => 'memcache-d-redis-db-schema',
        'cache_menu'          => 'memcache-d-redis-db-schema',
        'cache_block'         => 'memcache-e-redis-db-schema',
        'cache_content'       => 'memcache-e-redis-db-schema',
        'cache_page'          => 'memcache-e-redis-db-schema',
        'cache_views_data'    => 'memcache-g-redis-db-schema',
        'cache_views'         => 'memcache-g-redis-db-schema',
        'views_object_cache'  => 'memcache-g-redis-db-schema',
        'cache_path_alias'    => 'memcache-db-schema',
        'cache_path_source'   => 'memcache-db-schema',
        'cache_update'        => 'memcache-h-redis-db-schema',
      ),
    );
    } // end of if (file_exists('./modules/o_contrib/cache/cache.inc'))
  } // end of if (!preg_match("/(dev)/", $_SERVER['HTTP_HOST'])
} // end of if (!preg_match("/(standard)|(minimal)/", $conf['install_profile']))

/**
 * Drupal for Facebook (fb)
 *
 * Important:
 * Facebook client libraries will not work properly if arg_separator.output is not &.
 * The default value is &amp;. Change this in settings.php. Make the value "&"
 * http://drupal.org/node/205476
 */
if ($custom_fb == "NO" ) {
  if (file_exists('sites/all/modules/fb/fb_settings.inc')) {
    ini_set('arg_separator.output', '&');
    require_once "sites/all/modules/fb/fb_settings.inc";
    $conf['fb_api_file'] = "sites/all/modules/fb/facebook-platform/php/facebook.php";
  }
  elseif (file_exists('profiles/' . $conf['install_profile'] . '/modules/fb/fb_settings.inc')) {
    ini_set('arg_separator.output', '&');
    require_once 'profiles/' . $conf['install_profile'] . '/modules/fb/fb_settings.inc';
    $conf['fb_api_file'] = 'profiles/' . $conf['install_profile'] . '/modules/fb/facebook-platform/php/facebook.php';
  }
  elseif (file_exists('profiles/' . $conf['install_profile'] . '/modules/contrib/fb/fb_settings.inc')) {
    ini_set('arg_separator.output', '&');
    require_once 'profiles/' . $conf['install_profile'] . '/modules/contrib/fb/fb_settings.inc';
    $conf['fb_api_file'] = 'profiles/' . $conf['install_profile'] . '/modules/contrib/fb/facebook-platform/php/facebook.php';
  }
}

/**
 * Domain module
 *
 */
if ($custom_da == "NO" ) {
  if (file_exists('sites/all/modules/domain/settings.inc')) {
    require_once "sites/all/modules/domain/settings.inc";
  }
  elseif (file_exists('profiles/' . $conf['install_profile'] . '/modules/domain/settings.inc')) {
    require_once 'profiles/' . $conf['install_profile'] . '/modules/domain/settings.inc';
  }
  elseif (file_exists('profiles/' . $conf['install_profile'] . '/modules/contrib/domain/settings.inc')) {
    require_once 'profiles/' . $conf['install_profile'] . '/modules/contrib/domain/settings.inc';
  }
}
